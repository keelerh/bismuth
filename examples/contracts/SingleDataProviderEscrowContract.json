pragma solidity ^0.4.9;\r\n\r\ncontract SingleDataProviderEscrowContract {\r\n\r\n    \/\/ State variables\r\n    address public querier;\r\n    string public queryURI;\r\n    address public target;\r\n    uint public amount;\r\n    string public queryResultHash;\r\n\r\n    enum State { Created, Completed, Inactive }\r\n    State public state = State.Created;\r\n\r\n    function Query(string _queryURI, address _target, uint _amount)\r\n      payable\r\n    {\r\n        querier = msg.sender;\r\n        queryURI = _queryURI;\r\n        target = _target;\r\n        amount = _amount;\r\n    }\r\n\r\n    modifier onlyQuerier() {\r\n        if (msg.sender != querier) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyTarget() {\r\n        if (msg.sender != target) throw;\r\n        _;\r\n    }\r\n\r\n    modifier inState(State _state) {\r\n        if (state != _state) throw;\r\n        _;\r\n    }\r\n\r\n    event queryRun(address target);\r\n    event queryPaymentSent(address from, address to, uint amount);\r\n    event inactivated();\r\n\r\n    \/\/\/ Called by the specified data provider after\r\n    \/\/ algorithm execution.\r\n    function confirmQueryRun()\r\n        onlyTarget()\r\n        inState(State.Created)\r\n        returns(bool success)\r\n    {\r\n        queryRun(msg.sender);\r\n        state = State.Completed;\r\n        return true;\r\n    }\r\n\r\n    \/\/\/ Uses the withdrawal pattern to allow the\r\n    \/\/\/ target data provider to retrieve their payment.\r\n    \/\/ See: http:\/\/solidity.readthedocs.io\/en\/develop\/common-patterns.html\r\n    function withdraw()\r\n        onlyTarget\r\n        inState(State.Completed)\r\n        returns(bool success)\r\n    {\r\n        \/\/ The pending payment for the data provider must\r\n        \/\/ be zeroed before sending to prevent re-entrancy\r\n        \/\/ attacks\r\n        uint payment = amount;\r\n        amount = 0;\r\n        if (msg.sender.send(payment)) {\r\n            queryPaymentSent(querier, msg.sender, amount);\r\n            state = State.Inactive;\r\n            return true;\r\n        } else {\r\n            amount = payment;\r\n            return false;\r\n        }\r\n    }\r\n\r\n}
