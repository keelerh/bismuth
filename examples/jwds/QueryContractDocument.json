{
	"payload": {
		"queryURI": "https://example.com/opal/queries/h4sh1",
		"contractName": "Query",
		"description": "Escrow Ethereum smart contract for multi-data provider queries with no parameters",
		"platform": "EVM",
		"language": "Solidity",
		"version": "0.4.9",
		"legalese": "",
		"source": "pragma solidity ^0.4.9;\r\n\r\ncontract Query {\r\n\r\n    struct DataProvider {\r\n        uint bid;\r\n        bool isTarget;\r\n        bool bidAccepted;\r\n        bool bidRejected;\r\n        bool queryRun;\r\n        bool paymentCollected;\r\n    }\r\n\r\n    \/\/ State variables\r\n    address public querier;\r\n    string public queryURI;\r\n    mapping(address => DataProvider) public targets;\r\n    address[] targetIdx;\r\n    string[] public queryResultHashes;\r\n\r\n    enum State { Created, Locked, Completed, Inactive }\r\n    State public state = State.Created;\r\n\r\n    function Query(string _queryURI) {\r\n        querier = msg.sender;\r\n        queryURI = _queryURI;\r\n    }\r\n\r\n    modifier onlyQuerier() {\r\n        if (msg.sender != querier) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyTarget() {\r\n        if (!targets[msg.sender].isTarget) throw;\r\n        _;\r\n    }\r\n\r\n    modifier inState(State _state) {\r\n        if (state != _state) throw;\r\n        _;\r\n    }\r\n\r\n    event bidSubmitted(address dataProviderAddr, uint bid);\r\n    event bidRejected(address dataProviderAddr, uint bid);\r\n    event bidAccepted(address dataProviderAddr, uint bid);\r\n    event queryLocked();\r\n    event queryRun(address dataProviderAddr);\r\n    event queryPaymentSent(address from, address to, uint amoun);\r\n    event inactivated();\r\n\r\n    \/\/\/ Add a data provider as a target, specifying\r\n    \/\/\/ a bid amount and supplying payment equivalent\r\n    \/\/\/ to the bid amount.\r\n    function submitBid(address _dataProviderAddress, uint _bid)\r\n        payable\r\n        onlyQuerier\r\n        inState(State.Created)\r\n        returns(bool success)\r\n    {\r\n        if (msg.value < _bid) throw;\r\n        DataProvider memory target = DataProvider({\r\n            bid: _bid,\r\n            isTarget: true,\r\n            bidAccepted: false,\r\n            bidRejected: false,\r\n            queryRun: false,\r\n            paymentCollected: false\r\n        });\r\n        targets[_dataProviderAddress] = target;\r\n        targetIdx.push(_dataProviderAddress);\r\n        bidSubmitted(_dataProviderAddress, _bid);\r\n        return true;\r\n    }\r\n\r\n    \/\/\/ Reject the bid for running the contract,\r\n    \/\/\/ which returns the ether held in escrow for\r\n    \/\/\/ that bid to the querier.\r\n    function rejectBid()\r\n        onlyTarget\r\n        inState(State.Created)\r\n        returns(bool success)\r\n    {\r\n        DataProvider target = targets[msg.sender];\r\n        if (target.bidAccepted) throw;\r\n        if (!querier.send(target.bid)) throw;\r\n        targets[msg.sender].bidRejected = true;\r\n        bidRejected(msg.sender, target.bid);\r\n        return true;\r\n    }\r\n\r\n    \/\/\/ Confirms that a data provider accepts the\r\n    \/\/\/ query bid. The query is locked once all data\r\n    \/\/\/ providers accept.\r\n    function acceptBid()\r\n        onlyTarget\r\n        inState(State.Created)\r\n        returns(bool success)\r\n    {\r\n        targets[msg.sender].bidAccepted = true;\r\n        uint8 numAccepted = 0;\r\n        for (uint i = 0; i < targetIdx.length; i++) {\r\n            if (targets[targetIdx[i]].bidAccepted) {\r\n                numAccepted += 1;\r\n            }\r\n        }\r\n        if (numAccepted == targetIdx.length) {\r\n            state = State.Locked;\r\n        }\r\n        bidAccepted(msg.sender, targets[msg.sender].bid);\r\n        return true;\r\n    }\r\n\r\n    \/\/\/ Allows the querier to lock the query, signalling\r\n    \/\/\/ to the data providers which have accepted their\r\n    \/\/\/ bid to run the query. At this point, no additional\r\n    \/\/\/ data providers may be included, and any provider\r\n    \/\/\/ which has not accepted their bid is excluded from\r\n    \/\/\/ this query transaction.\r\n    function lock()\r\n        onlyQuerier()\r\n        inState(State.Created)\r\n    {\r\n        uint numTargets = 0;\r\n        for (uint i = 0; i < targetIdx.length; i++) {\r\n            if (!targets[targetIdx[i]].bidAccepted) {\r\n                targets[targetIdx[i]].isTarget = false;\r\n            } else {\r\n                numTargets += 1;\r\n            }\r\n        }\r\n        if (numTargets > 0) {\r\n            state = State.Locked;\r\n            queryLocked();\r\n        } else {\r\n            state = State.Inactive;\r\n            inactivated();\r\n        }\r\n    }\r\n\r\n    \/\/\/ Cancel the query and reclaim the ether.\r\n    \/\/\/ Can only be called by the querier before\r\n    \/\/\/ the contract is locked.\r\n    function cancel()\r\n        onlyQuerier\r\n        inState(State.Created)\r\n    {\r\n        state = State.Inactive;\r\n        if (!querier.send(this.balance)) throw;\r\n        inactivated();\r\n    }\r\n\r\n    \/\/\/ Called by a data provider after completion\r\n    \/\/\/ of its part of the query.\r\n    function confirmQueryRun()\r\n        onlyTarget()\r\n        inState(State.Locked)\r\n        returns(bool success)\r\n    {\r\n        targets[msg.sender].queryRun = true;\r\n        queryRun(msg.sender);\r\n        uint numCompleted = 0;\r\n        for (uint8 i = 0; i < targetIdx.length; i++) {\r\n            if (targets[targetIdx[i]].queryRun) {\r\n                numCompleted += 1;\r\n            }\r\n        }\r\n        if (numCompleted == targetIdx.length) {\r\n            state = State.Completed;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    \/\/\/ Uses the withdrawal pattern to allow data\r\n    \/\/\/ providers to retrieve payment equivalent to\r\n    \/\/\/ the accepted bid after all targets have\r\n    \/\/\/ completed execution.\r\n    \/\/ See: http:\/\/solidity.readthedocs.io\/en\/develop\/common-patterns.html\r\n    function withdraw()\r\n        onlyTarget\r\n        inState(State.Completed)\r\n        returns(bool success)\r\n    {\r\n        uint amount = targets[msg.sender].bid;\r\n        \/\/ The pending payment for this data provider must\r\n        \/\/ be zeroed before sending to prevent re-entrancy\r\n        \/\/ attacks\r\n        targets[msg.sender].bid = 0;\r\n        if (msg.sender.send(amount)) {\r\n            targets[msg.sender].paymentCollected = true;\r\n            queryPaymentSent(querier, msg.sender, amount);\r\n            uint numPaid = 0;\r\n            for (uint8 i = 0; i < targetIdx.length; i++) {\r\n                if (targets[targetIdx[i]].paymentCollected) {\r\n                    numPaid += 1;\r\n                }\r\n            }\r\n            if (numPaid == targetIdx.length) {\r\n                state = State.Inactive;\r\n            }\r\n            return true;\r\n        } else {\r\n            targets[msg.sender].bid = amount;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    \/\/\/ Called by the querier to recover any\r\n    \/\/\/ additional funds overpaid to the contract\r\n    \/\/\/ after all data providers have extracted their\r\n    \/\/\/ payment from escrow.\r\n    function withdrawRemainingFunds()\r\n        onlyQuerier()\r\n        inState(State.Inactive)\r\n        returns(bool success)\r\n    {\r\n        uint amount = targets[msg.sender].bid;\r\n        if (!querier.send(this.balance)) throw;\r\n        return true;\r\n    }\r\n\r\n}",
		"bytecode": "6060604052600580546000919060ff19166001835b0217905550341561002157fe5b6040516200114738038062001147833981016040528051015b60008054600160a060020a03191633600160a060020a03161790558051610068906001906020840190610070565b505b50610110565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b157805160ff19168380011785556100de565b828001600101855582156100de579182015b828111156100de5782518255916020019190600101906100c3565b5b506100eb9291506100ef565b5090565b61010d91905b808211156100eb57600081556001016100f5565b5090565b90565b61102780620001206000396000f300606060405236156100a95763ffffffff60e060020a6000350416633ccfd60b81146100ab5780633e3581a7146100cf5780634db25b5b146100f3578063562c478414610183578063c19d93fb146101d6578063cf2fd65a1461020a578063d8c5e7801461029d578063e52a7874146102c9578063e88e9241146102ed578063ea8a1af014610311578063ef86ce8e14610323578063f2a4f2d614610347578063f83d08ba14610372575bfe5b34156100b357fe5b6100bb610384565b604080519115158252519081900360200190f35b34156100d757fe5b6100bb61055b565b604080519115158252519081900360200190f35b34156100fb57fe5b610103610681565b604080516020808252835181830152835191928392908301918501908083838215610149575b80518252602083111561014957601f199092019160209182019101610129565b505050905090810190601f1680156101755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018b57fe5b61019f600160a060020a036004351661070e565b60408051968752941515602087015292151585850152901515606085015215156080840152151560a0830152519081900360c00190f35b34156101de57fe5b6101e6610752565b604051808260038111156101f657fe5b60ff16815260200191505060405180910390f35b341561021257fe5b61010360043561075b565b604080516020808252835181830152835191928392908301918501908083838215610149575b80518252602083111561014957601f199092019160209182019101610129565b505050905090810190601f1680156101755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102a557fe5b6102ad610805565b60408051600160a060020a039092168252519081900360200190f35b34156102d157fe5b6100bb610814565b604080519115158252519081900360200190f35b34156102f557fe5b6100bb610980565b604080519115158252519081900360200190f35b341561031957fe5b610321610ae1565b005b341561032b57fe5b6100bb610b9b565b604080519115158252519081900360200190f35b6100bb600160a060020a0360043516602435610c31565b604080519115158252519081900360200190f35b341561037a57fe5b610321610dd4565b005b600160a060020a03331660009081526002602052604081206001015481908190819060ff1615156103b55760006000fd5b6002805b60055460ff1660038111156103ca57fe5b146103d55760006000fd5b600160a060020a033316600081815260026020526040808220805490839055905190965086156108fc0291879190818181858888f193505050501561053357600160a060020a033381166000818152600260209081526040808320600101805464ff0000000019166401000000001790559154825194168452830191909152818101869052517f6487409afdae52da7f03558cf6f2decb9b508eccf41b050ea2b3df993e9ff4989181900360600190a160009250600091505b60035460ff8316101561050a576002600060038460ff168154811015156104b157fe5b906000526020600020900160005b90546101009190910a9004600160a060020a03168152602081019190915260400160002060010154640100000000900460ff16156104fe576001830192505b5b60019091019061048e565b60035483141561052a57600580546003919060ff19166001835b02179055505b60019450610551565b600160a060020a033316600090815260026020526040812085905594505b5b5b505b50505090565b600160a060020a033316600090815260026020526040812060010154819060ff1615156105885760006000fd5b6000805b60055460ff16600381111561059d57fe5b146105a85760006000fd5b33600160a060020a031660009081526002602052604090206001810154909250610100900460ff16156105db5760006000fd5b600080548354604051600160a060020a039092169281156108fc029290818181858888f1935050505015156106105760006000fd5b600160a060020a033316600081815260026020908152604091829020600101805462ff0000191662010000179055845482519384529083015280517fba15e56bb73ba81e4e731c2f55eaabd45c01c1c0a8e7cdda78a29d3ff8dfaea89281900390910190a1600192505b5b505b5090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b505050505081565b6002602052600090815260409020805460019091015460ff808216916101008104821691620100008204811691630100000081048216916401000000009091041686565b60055460ff1681565b600480548290811061076957fe5b906000526020600020900160005b508054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815293508301828280156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b505050505081565b600054600160a060020a031681565b600160a060020a0333166000908152600260205260408120600101548190819060ff1615156108435760006000fd5b6000805b60055460ff16600381111561085857fe5b146108635760006000fd5b600160a060020a0333166000908152600260205260408120600101805461ff00191661010017905592508291505b6003548210156108ff57600260006003848154811015156108ae57fe5b906000526020600020900160005b905461010091820a9004600160a060020a031682526020820192909252604001600020600101540460ff16156108f3576001830192505b5b600190910190610891565b60035460ff8416141561092157600580546001919060ff191682805b02179055505b600160a060020a0333166000818152600260209081526040918290205482519384529083015280517fc425a66615efc387aeb77e7b5dca9a585a1b49b0dbfbad5be7fe8d0f3cbdd0f89281900390910190a1600193505b5b505b505090565b600160a060020a0333166000908152600260205260408120600101548190819060ff1615156109af5760006000fd5b6001805b60055460ff1660038111156109c457fe5b146109cf5760006000fd5b600160a060020a033316600081815260026020908152604091829020600101805463ff00000019166301000000179055815192835290517f6868332249d8c4625bbd17697d60ecfe3db637a2acd8eb9ec0126cbfc552f8dc9281900390910190a160009250600091505b60035460ff83161015610ab4576002600060038460ff16815481101515610a5c57fe5b906000526020600020900160005b90546101009190910a9004600160a060020a031681526020810191909152604001600020600101546301000000900460ff1615610aa8576001830192505b5b600190910190610a39565b600354831415610ad457600580546002919060ff19166001835b02179055505b600193505b5b505b505090565b60005433600160a060020a03908116911614610afd5760006000fd5b6000805b60055460ff166003811115610b1257fe5b14610b1d5760006000fd5b600580546003919060ff19166001835b021790555060008054604051600160a060020a0391821692309092163180156108fc0292909190818181858888f193505050501515610b6c5760006000fd5b6040517f061e0330970239bcb7bb079ca0caed4ded4f04fabfbf5ee8874000a01ccf2ca490600090a15b5b505b565b60008054819033600160a060020a03908116911614610bba5760006000fd5b6003805b60055460ff166003811115610bcf57fe5b14610bda5760006000fd5b600160a060020a0333811660009081526002602052604080822054825491519095509083169230163180156108fc0292909190818181858888f193505050501515610c255760006000fd5b600192505b5b505b5090565b6000610c3b610f7b565b60005433600160a060020a03908116911614610c575760006000fd5b6000805b60055460ff166003811115610c6c57fe5b14610c775760006000fd5b83341015610c855760006000fd5b6040805160c081018252858152600160208083018281526000848601818152606086018281526080870183815260a08801848152600160a060020a038f1685526002909652979092208651815592519285018054915192519751945115156401000000000264ff000000001995151563010000000263ff00000019991515620100000262ff0000199515156101000261ff001997151560ff1990961695909517969096169390931793909316939093179690961695909517919091169390931790925560038054919450918101610d5c8382610fb0565b916000526020600020900160005b8154600160a060020a03808a166101009390930a83810291021990911617909155604080519182526020820187905280517fc9b93ef504e417c37a35aa59e4ec683c1365d1637af94a29e3aa8b5adc6a37299350918290030190a1600192505b5b505b5092915050565b60008054819033600160a060020a03908116911614610df35760006000fd5b6000805b60055460ff166003811115610e0857fe5b14610e135760006000fd5b60009250600091505b600354821015610ee95760026000600384815481101515610e3957fe5b906000526020600020900160005b905461010091820a9004600160a060020a031682526020820192909252604001600020600101540460ff161515610ed657600060026000600385815481101515610e8d57fe5b906000526020600020900160005b90546101009190910a9004600160a060020a031681526020810191909152604001600020600101805460ff1916911515919091179055610edd565b6001830192505b5b600190910190610e1c565b6000831115610f3457600580546001919060ff191682805b02179055506040517fc09ebff9df11b3e77e59d3b61d4f11d9b3bbeb5b4921b00427d8d62ce39eb4d190600090a1610f73565b600580546003919060ff19166001835b02179055506040517f061e0330970239bcb7bb079ca0caed4ded4f04fabfbf5ee8874000a01ccf2ca490600090a15b5b5b505b5050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b815481835581811511610f7357600083815260209020610f73918101908301610fda565b5b505050565b610ff891905b8082111561067d5760008155600101610fe0565b5090565b905600a165627a7a72305820e9b4c487863ace862adf7e996e7d942242ff8ebfa57e5b6668d9996c3e6722ac0029",
		"iat": 1489626615,
		"exp": 1489713015
	},
	"signatures": [{
		"protected": {
			"alg": "ES256",
			"kid": "IkJ46pRUohs",
			"jku": "https://example.com/opal/jwks"
		},
		"signature": "..."
	}]
}
